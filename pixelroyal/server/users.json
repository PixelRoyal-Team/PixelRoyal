const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const app = express();
app.use(express.json());

const users = [];

const createAccount = async (req, res) => {
  const { username, password } = req.body;

  try {
    const salt = bcrypt.genSaltSync();
    const hashedPassword = bcrypt.hashSync(password, salt);

    const user = {
      username,
      password_hash: hashedPassword,
      salt
    };

    users.push(user);

    res.json({ message: 'Account created successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to create account' });
  }
};

const login = async (req, res) => {
  const { username, password } = req.body;

  try {
    const user = users.find(u => u.username === username);

    if (!user || !bcrypt.compareSync(password, user.password_hash)) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    const token = jwt.sign({ username }, 'your_secret_key');
    res.json({ token });
  } catch (error) {
    res.status(500).json({ error: 'Failed to login' });
  }
};


app.post('/register', createAccount);
app.post('/login', login);

app.listen(8081, () => {
  console.log('Server listening on port 8081');
});

const createAccount = async (req, res) => {
  const { username, password } = req.body;

  try {
    const salt = bcrypt.genSaltSync();
    const hashedPassword = bcrypt.hashSync(password, salt);

    const user = await User.create({
      username,
      password_hash: hashedPassword,
      salt
    });

    res.json({ message: 'Account created successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to create account' });
  }
};

const login = async (req, res) => {
  const { username, password } = req.body;

  try {
    const user = await User.findOne({ where: { username } });

    if (!user || !bcrypt.compareSync(password, user.password_hash)) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    const token = jwt.sign({ username }, 'your_secret_key');
    res.json({ token });
  } catch (error) {
    res.status(500).json({ error: 'Failed to login' });
  }
};


app.post('/register', createAccount);
app.post('/login', login);

app.listen(8081, () => {
  console.log('Server listening on port 8081');
});